(()=>{"use strict";!function(){var e=document.getElementById("content");console.log("ayy");const t=new Date,s=new Date(t.getTime()-6e4*t.getTimezoneOffset()).toISOString().split("T")[0];e.innerHTML=`\n    <header>\n          </a>\n      <h1>To Do.</h1>\n        </header>\n    <main>\n    <h2>Filter</h2>\n      <div class="filter-container">\n        <button data-index="all" class="filter"><i class="fa-regular fa-calendar"></i> All</button>\n        <button data-index="today" class="filter"><i class="fa-solid fa-calendar-day"></i> Today</button>\n        <button data-index="week" class="filter"><i class="fa-solid fa-calendar-week"></i> This Week</button>\n        <button data-index="important" class="filter"><i class="fa-regular fa-calendar-xmark"></i> Important</button>\n        <button data-index="completed" class="filter"><i class="fa-regular fa-calendar-check"></i> Completed</button>\n      </div>\n      <div class="project-container">\n        <h2 class="project-text">Projects</h2>\n        <button class="new-project-button">+</button>\n        <div class="project-list">          \n        </div>\n      </div>\n      <div class="todo-container">\n        <div class="todo-header">\n          <h1 class="current-filter"><i class="fa-regular fa-calendar"></i>  All</h1>\n        </div>\n        <form class="add-task-form">\n          <label for="title" class="task-display">Tasks (0)</label>\n          \n          <input type="text" id="task-title" name="title" class="title-text" placeholder="Task Title">\n          <div>\n            <span class="input-tip">DUE DATE</span>\n            <input type="date" id="task-due-date" name="due-date" class="due-date" value="${s}">\n          </div>\n          <div>\n            <span class="input-tip">PRIORITY</span>\n            <select name="priority" id="task-priority">\n              <option class="priority-option" value="Low">Low</option>\n              <option class="priority-option" value="Medium">Medium</option>\n              <option class="priority-option" value="High">High</option>\n            </select>\n          </div>\n          <button class="add-task" type="button">+</button>\n        </form>\n        <div class="todos">\n        </div>\n        <div class="chart-container">\n          <canvas id="myChart" width="400" height="400"></canvas>\n        </div>\n      </div>\n    </main>\n    <footer>\n      <p>Created by R Varun reddy</p>\n    </footer>\n    `}();class e{constructor(){this.projects=[]}init(){this.loadFromStorage(),this.render(),this.bindEvents(),this.taskButtonDisable()}loadFromStorage(){if(localStorage.getItem("projects")&&this.projects.length<1){const e=JSON.parse(localStorage.getItem("projects"));this.projects=e,t.updateProjects(),s.updateTasks()}}render(){console.log("render"),s.updateTasks(),t.displayProjects(),new a}get projectForStorage(){return this.projects}set projectsFromStorage(e){this.projects=e}addProject(e){this.projects.push(e)}bindEvents(){document.addEventListener("click",(e=>{switch(console.log(e.target.className),e.target.className){case"add-task":s.addNewTask();break;case"close":a.toggle();break;case"fa-solid fa-trash project-delete":t.deleteProject(e.target);break;case"fa-solid fa-edit project-edit":t.editProject(e.target);break;case"new-project-button":t.newProject();break;case"new-project":t.selectProject(e.target);break;case"fa-solid fa-trash task-delete":s.deleteTask(e.target);break;case"fa-solid fa-edit task-edit":s.editTask(e.target);break;case"fa-solid fa-check-circle task-complete":s.completeTask(e.target)}})),document.querySelectorAll(".filter").forEach((e=>{e.addEventListener("click",(e=>{switch(console.log(e.target.dataset.index),e.target.dataset.index){case"all":s.filterTasks("all");break;case"today":s.filterTasks("today");break;case"week":s.filterTasks("week");break;case"important":s.filterTasks("important");break;case"completed":s.filterTasks("completed")}}))}))}get taskButtonStatus(){return document.querySelector(".add-task").classList.contains("disabled")}get projectListLength(){return this.projects.length}get selectedProject(){const e=document.querySelectorAll(".new-project");return Array.from(e).find((e=>e.classList.contains("selected")))}get selectedProjectTasks(){const e=this.selectedProject.dataset.index;return this.projects[e].tasks}get filterButtonInnerContent(){const e=document.querySelectorAll(".filter");return Array.from(e).find((e=>e.classList.contains("selected"))).textContent}taskButtonDisable(){const e=document.querySelector(".add-task");0===this.projects.length?e.classList.add("disabled"):this.projects.length>0&&this.taskButtonStatus&&e.classList.remove("disabled")}}class t extends e{constructor(){super(),this.name=`Project ${o.projects.length+1}`,this.index=o.projects.length,this.editing=!1,this.selected=!1,this.tasks=[]}set editingProject(e){this.editing=e}set selectedProject(e){this.selected=e}static projectTasks(e){if(void 0!==e)return e.tasks}static currentProject(){const e=document.querySelectorAll(".new-project");if(e.length>0&&void 0!==e){const t=Array.from(e).find((e=>e.classList.contains("selected"))).querySelector("h2").dataset.index;o.projects;for(let e=0;e<o.projectListLength;e++)if(o.projects[e].index==t)return o.projects[e]}}static newProject(){const e=new t;return e.tasks=[],o.projects.push(e),t.updateProjects(),o.taskButtonDisable(),s.updateTasks(),e}static updateProjects(){t.updateProjectCount(),t.displayProjects(),t.defaultSelection(),s.updateTasks()}static updateProjectCount(){document.querySelector(".project-text").textContent=`Projects (${o.projects.length})`}static displayProjects(){const e=document.querySelector(".project-list");e.innerHTML="";for(const t of o.projects){const s=document.createElement("div");s.classList.add("new-project"),s.innerHTML=`\n          <h2 data-index="${t.index}" class="new-project"># ${t.name}</h2>\n          <div class="project-buttons">\n            <a href="#"><i class="fa-solid fa-edit project-edit"></i></a>\n            <a href="#"><i class="fa-solid fa-trash project-delete"></i></a>\n          </div>\n        `,t.selected&&s.classList.add("selected"),e.appendChild(s)}}static defaultSelection(){const e=document.querySelectorAll(".new-project");e.length>0&&(void 0!==Array.from(e).find((e=>e.classList.contains("selected")))&&1!==e.length||(e[0].classList.add("selected"),o.projects[0].selectedProject=!0))}static editProject(e){const t=e.parentElement.parentElement.parentElement,s=a.projectIndex(t),a=o.projects[s];a.editingProject=!0,t.innerHTML=`\n      <input type="text" class="project-edit-input" value="${a.name}">\n      <div class="project-buttons">\n        <a href="#"><i class="fa-solid fa-check project-edit"></i></a>\n        <a href="#"><i class="fa-solid fa-trash project-delete"></i></a>\n      </div>\n    `,document.addEventListener("click",(e=>{switch(console.log(e.target.classList[2]),e.target.classList[2]){case"project-edit":a.editProjectConfirm(e.target);break;case"project-delete":a.editProjectCancel(e.target)}}))}static editProjectConfirm(e){const s=e.parentElement.parentElement.parentElement,a=s.querySelector("h2").dataset.index;console.log(a),o.projects;for(let e=0;e<o.projectListLength;e++)o.projects[e].index==a&&(o.projects[e].editingProject=!1,o.projects[e].name=s.querySelector(".project-edit-input").value,t.updateProjects())}static editProjectCancel(e){const s=e.parentElement.parentElement.parentElement.querySelector("h2").dataset.index;o.projects;for(let e=0;e<o.projectListLength;e++)o.projects[e].index==s&&(o.projects[e].editingProject=!1,t.updateProjects())}static deleteProject(e){const a=e.parentElement.parentElement.parentElement,n=a.querySelector("h2").dataset.index,r=o.projects;for(let e=0;e<o.projectListLength;e++)o.projects[e].index==n&&(r.splice(e,1),a.remove(),t.updateProjects());o.taskButtonDisable(),s.updateTasks()}static selectProject(e){const s=e,a=s.querySelector("h2").dataset.index,n=o.projects;for(let e=0;e<o.projectListLength;e++)o.projects[e].index==a?(n[e].selected=!0,s.classList.add("selected")):(n[e].selected=!1,s.classList.remove("selected"));t.updateProjects()}}class s extends t{constructor(e,s,a,n,o){super(),this.title=e,this.description=s,this.dueDate=a,this.priority=n,this.notes=o,this.editing=!1,this.index=t.currentProject().tasks.length,this.isComplete=!1}get isEditing(){return this.editing}set isEditing(e){this.editing=e}get taskInputs(){let e=document.getElementById("task-title").value,s=document.getElementById("task-due-date").value,a=document.getElementById("task-priority"),n=a.options[a.selectedIndex].value;return new Date(s),""===e&&(e=`Task ${t.currentProject().tasks.length+1}`),""===s&&(s="No due date"),[e,s,n]}static addNewTask(){const e=new s,a=e.taskInputs;e.title=a[0],e.dueDate=a[1],e.priority=a[2],e.description=" ";let n=t.currentProject();t.projectTasks(n).push(e),s.updateTasks()}static deleteTask(e){const a=e.parentElement.parentElement.parentElement,n=a.querySelector("h2").dataset.index,o=t.currentProject().tasks;for(let e=0;e<o.length;e++)o[e].index==n&&(o.splice(e,1),a.remove(),s.updateTasks())}static editTask(e){const s=e.parentElement.parentElement.parentElement.querySelector("h2").dataset.index,n=t.currentProject().tasks;for(let t=0;t<n.length;t++)if(n[t].index==s){n[t].editing=!0;const s=n[t],o=s.title,r=s.description,c=s.dueDate,i=s.priority;a.toggle(),document.getElementById("title").value=o,document.getElementById("description").value=r,document.getElementById("due-date").value=c,document.getElementById("priority").value=i,document.querySelector(".new-task-button").addEventListener("click",(()=>{this.saveTask(e)}))}}static saveTask(e){const s=e.parentElement.parentElement.parentElement.querySelector("h2").dataset.index,n=t.currentProject().tasks;for(let e=0;e<n.length;e++)if(n[e].index==s){n[e].editing=!1,n[e];const t=document.getElementById("title").value,o=document.getElementById("description").value,r=document.getElementById("due-date").value,c=document.getElementById("priority").value;n[e].index==s&&(n[e].title=t,n[e].description=o,n[e].dueDate=r,n[e].priority=c),a.close(),this.updateTasks()}}static filterTasks(e){const s=document.querySelectorAll(".todo"),a=t.currentProject()?.tasks,n=document.querySelectorAll(".filter");n.forEach((e=>{e.classList.remove("selected")}));const o=new Date,r=o.toDateString(),c=o.setDate(o.getDate()+7),i=new Date(c).toDateString(),l=document.querySelector(".current-filter");if(s.length>0){switch(e){case"all":l.innerHTML='<i class="fa-regular fa-calendar"></i> All';break;case"today":l.innerHTML='<i class="fa-solid fa-calendar-day"></i> Today';break;case"week":l.innerHTML='<i class="fa-solid fa-calendar-week"></i> This Week';break;case"important":l.innerHTML='<i class="fa-regular fa-calendar-xmark"></i> Important';break;case"completed":l.innerHTML='<i class="fa-regular fa-calendar-check"></i> Completed'}switch(e){case"all":n[0].classList.add("selected"),s.forEach((e=>{e.style.display="flex"}));break;case"today":n[1].classList.add("selected"),s.forEach((e=>{e.style.display="none"})),a.forEach((e=>{const t=new Date(e.dueDate).toDateString();s[e.index].style.display=t===r?"flex":"none"}));break;case"week":n[2].classList.add("selected"),s.forEach((e=>{e.style.display="none"})),a.forEach((e=>{const t=new Date(e.dueDate).toDateString();s[e.index].style.display=t<=i?"flex":"none"}));break;case"important":n[3].classList.add("selected"),s.forEach((e=>{e.style.display="none"})),a.forEach((e=>{"High"===e.priority?s[e.index].style.display="flex":s[e.index].style.display="none"}));break;case"completed":n[4].classList.add("selected"),s.forEach((e=>{e.style.display="none"})),a.forEach((e=>{!0===e.isComplete?s[e.index].style.display="flex":s[e.index].style.display="none"}))}}else{const e=document.querySelectorAll(".filter");e.forEach((e=>{e.classList.remove("selected")})),e[0].classList.add("selected")}}static setDefaultAllFilter(){const e=document.querySelectorAll(".filter");e.forEach((e=>{e.classList.remove("selected")})),e[0].classList.add("selected")}static updateTaskComplete(){const e=document.querySelectorAll(".todo");for(const s of e){const e=s.querySelector("h2").dataset.index,a=t.currentProject().tasks;for(let t=0;t<a.length;t++)a[t].index==e&&(a[t].isComplete?s.classList.add("completed"):s.classList.remove("completed"))}}static completeTask(e){const a=e.parentElement.parentElement.parentElement;console.log(a);const n=a.querySelector("h2").dataset.index,o=t.currentProject().tasks;for(let e=0;e<o.length;e++)o[e].index==n&&(o[e].isComplete=!o[e].isComplete);s.updateTasks()}static updateTasks(){s.updateTaskCount(),s.clearInputs(),s.updateTaskMessage(),s.displayTasks(),s.updateTaskComplete(),s.setDefaultAllFilter(),s.destroyGraph(),s.drawGraph()}static updateTaskCount(){const e=document.querySelector(".task-display"),s=t.currentProject();if(void 0!==s){const a=t.projectTasks(s);e.textContent=`Tasks (${a.length})`}}static clearInputs(){document.querySelector(".add-task-form").reset()}static updateTaskMessage(){const e=document.querySelector(".todos"),s=t.currentProject();if(void 0!==s){const a=t.projectTasks(s);if(console.log(a.length),0!==a.length)return;console.log(a.length),e.innerHTML='<p class="no-tasks">No tasks for this project <br><br> Add a task above</p>'}else e.innerHTML='<p class="no-tasks">No Projects to display<br><br>To get started, please create a project in the left column</p>'}static displayTasks(){const e=document.querySelector(".todos"),s=t.currentProject();if(void 0!==s&&s.tasks.length>0){const a=t.projectTasks(s);e.innerHTML="";for(let t=0;t<a.length;t++){const s=a[t],n=s.isComplete?"Completed":"In Progress",o=new Date(s.dueDate).toDateString(),r=document.createElement("div");r.classList.add("todo"),r.innerHTML=`\n          <h2 data-index="${s.index}">${s.title}</h2> \n          <p class="task-description">${s.description}</p>\n\n          <div class="todo-body">\n            <div>\n              <p class="todo-due-date"><span class="sub-heading">Due:</span>     ${o}</p>\n              <p class="due-when"></p> \n            </div>\n            <p class="todo-priority"><span class="sub-heading">Priority:</span>     ${s.priority}</p>\n            <p class="todo-status"><span class="sub-heading">Status:</span>     ${n}</p>\n          </div>\n          <div class="todo-buttons">\n            <a href="#"><i class="fa-solid fa-edit task-edit"></i></a>\n            <a href="#"><i class="fa-solid fa-trash task-delete"></i></a>\n            <a href="#"><i class="fa-solid fa-check-circle task-complete"></i></a>\n          </div>\n        `,e.appendChild(r)}}}static destroyGraph(){document.getElementById("myChart")?.remove();const e=document.createElement("canvas");e.id="myChart",e.height="200",e.width="350",document.querySelector(".chart-container").appendChild(e)}static drawGraph(){console.log("drawing graph");const e=document.getElementById("myChart").getContext("2d"),s=t.currentProject(),a=t.projectTasks(s),n=[],o=[];if(!(void 0!==a&&a.length>0))return;for(let e=0;e<a.length;e++){const t=a[e],s=new Date(t.dueDate).toDateString();n.push(s)}const r=[...new Set(n)];for(let e=0;e<r.length;e++){const t=r[e];let s=0;for(let e=0;e<n.length;e++)t===n[e]&&s++;o.push(s)}0!==o.length&&new Chart(e,{type:"line",data:{labels:r,datasets:[{label:"Tasks",data:o,backgroundColor:["rgba(255, 99, 132, 0.2)","rgba(54, 162, 235, 0.2)","rgba(255, 206, 86, 0.2)","rgba(75, 192, 192, 0.2)","rgba(153, 102, 255, 0.2)","rgba(255, 159, 64, 0.2)"],borderColor:["rgba(255, 99, 132, 1)","rgba(54, 162, 235, 1)","rgba(255, 206, 86, 1)","rgba(75, 192, 192, 1)","rgba(153, 102, 255, 1)","rgba(255, 159, 64, 1)"],borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}})}}class a extends e{constructor(){super(),this.modal=this.renderModal()}renderModal(){const e=document.querySelector("#content"),s=document.createElement("div");s.classList.add("task-modal");const a=t.currentProject()?t.currentProject().tasks:[];let n;for(let e=0;e<a.length;e++)a[e].isEditing&&(n=a[e]);s.innerHTML='\n      <div class="task-modal-content">\n        <span class="close">&times;</span>\n        <form id="new-task" onsubmit="return false">\n          <label for="title">Title</label>\n          <input type="text" id="title" name="title" placeholder="Title" value="">\n          <label for="description">Description</label>\n          <textarea id="description" name="description" placeholder="Description"></textarea>\n          <label for="due-date">Due Date</label>\n          <input type="date" name="due-date" id="due-date" placeholder="Due Date" value="">\n          <label for="priority">Priority</label>\n          <select name="priority" id="priority">\n            <option value="Low">Low</option>\n            <option value="Medium">Medium</option>\n            <option value="High">High</option>\n          </select>\n          <button class="new-task-button" type="submit">Add</button>\n        </form>\n      </div>\n    ',e.appendChild(s)}static toggle(){console.log("toggle"),a.hasActiveClass?a.close():a.open()}static get hasActiveClass(){return document.querySelector(".task-modal").classList.contains("active")}static open(){document.querySelector(".task-modal").classList.add("active")}static close(){document.querySelector(".task-modal").classList.remove("active")}}class n extends e{get projects(){return JSON.parse(localStorage.getItem("projects"))}static saveProjects(){const e=window.localStorage,t=[...o.projects];console.log(t),0===t.length?(setTimeout((()=>{console.log("No projects to save")}),2e3),e.removeItem("projects")):e.setItem("projects",JSON.stringify(t))}}const o=new e;o.init(),window.addEventListener("beforeunload",(()=>{n.saveProjects()}))})();